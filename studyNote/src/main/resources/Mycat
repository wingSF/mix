永远不要使用mycat做翻页实现
    即不要在mycat执行 limit  start，pagesize

ex:
    结构:
        mycat后面2个mysql
    前提:
        查询的数据不会落在一个mysql实例上

    执行1:
        select * from user order by id asc limit 0，5
    分析:
        sql要求从user表查询第0条到第5条

        如果要查询这5条数据，如何做

        在mysql1中 order by id asc limit 0，5
        在mysql2中 order by id asc limit 0，5

        将数据聚合
        执行order by id asc
        然后limit 0，5

        返回

    执行2:
        select * from user order by id asc limit 1，5
    分析:
        sql要求从user表查询第1条到第6条

        mysql1
            order by id asc limit 0，{start}+{pagesize}；
            order by id asc limit 0，6；
        mysql2
            order by id asc limit 0，6；

        此处需要好好思虑一下，mycat的这种解决办法如果有更好的方案的话，就能解决mycat翻页的这个问题


    执行3:
        select * from user order by id asc limit 1000000，1000
    分析:
        sql要求从user表查询第1条到第6条

        mysql1
            order by id asc limit 0，{start}+{pagesize}；
            order by id asc limit 0，1001000；
        mysql2
            order by id asc limit 0，1001000；

    试问:
        如果数据量足够多，start足够大，一次查询，myslq实例就会乖乖倒下



变通办法:
    while（resultSize！=0）{
        select * from user where id  > {上次查询的结果集的最后一条的id} order by id asc limit {pageSize}
    }

    分析:
        sql要求从user表查询第1条到第6条

        mysql1
            where id > {lastTimeMaxId} order by id asc limit {pagesize}；
        mysql2
            where id > {lastTimeMaxId} order by id asc limit {pagesize}；

通过上述可以实现全量数据的查询，且mysql实例的压力只取决与pageSize的大小


