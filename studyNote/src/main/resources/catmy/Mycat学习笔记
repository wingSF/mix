# Mycat [官网地址](http://mycat.io)
## mycat技术为什么会出现？即传统的mysql有什么缺陷
* 单机mysql的连接数受限于机器本身的硬件资源，连接数一定有上限，默认配置100。
* 单机mysql在常见的Innodb engine中，B+索引是是存储在硬盘上的，随着数据量的增长，将会出现一次查询，多次io，会影戏那个效率。  
当然如果没有命中索引的话，应该会被组长打死的。

## 如何解决上面提到的这俩种问题
* 读写分离
    * 读写分离的原理
    ```text
    master库在操作的时候，把操作记录写入日志文件(binlog)，slave库通过网络从master拿到日志文件，然后在slave数据库上面重放，实现总从复制
    ```
    * 读写分离的配置
        * master和slave都需要分配serviceId
        * master库创建新用户并授权slave访问
        * master配置日志文件位置以及选定哪些业务库的操作要写入日志文件
        * slave指定master的host和binlog文件名称
        * slave指定read-only模式（对root用户是无效的）
        * slave指定重放日志的存储位置、要重放的库、日志的起始位置
    * 读写分离检验常用命令
        * show slave status;检查一下几项
            * slave_io_running:Yes
            * slave_sql_running:Yes
            * secondes_behind_master:0
                * 如果该项非0，说明有主从延迟。
    * 读写分离引入的新问题
        * 主从延迟
            * 数据库版本级的解决方案
                * [参考文献](https://blog.csdn.net/ownfire/article/details/53536566)
                * mysql 5.5不支持并行复制 slave从master读取日志是单线程的
                * mysql 5.6支持基于库的并行复制 
                * mysql 5.7基于GTID的并行复制
                > 上述思路很值得借鉴，但描述上有一些出入，建议去mysql官网查阅更详细的理论依据。  
                如何提高效率，多线程，如何解决多线程数据分配的问题，按照库多线程，能不能更精确些呢，按照master库并行提交的过程在slave库并行重放。
            * 程序级的解决方案
                * 检测到主从延迟(如何实现待考证)
                * 某些一致性要求高的场景，直接读主库。代码级别的数据源切换
            * 实践级别的延迟解决
                > 南方的某个州的政府项目，采购的机器io超级慢啊，批量倒入数据，要求尽快完成。DBA(NB的梁伟哥)给出的建议，版本无法变更的情况下的建议，关闭主从复制的校验机制，具体命令可以咨询下DBA
* 分库分表
    * 垂直拆分
        ```text
        是指单体大应用，所有的业务都访问同一个数据库实例，达到数据库瓶颈之后。按照业务线，将应用切分，同时将一个数据库拆分为多个数据库。减少单库数据量，且可以根据不同业务数据量的增长速率，对未来做一个合理的架构设计。
        ```
    * 水平拆分
        ```text
        将一个数据量很大的表，拆分为多个表
        ```
    * 带来的新问题
        * 业务库分离之后，分布式事务问题
        * 拆表后，数据聚合、排序、分页等问题
        
## mycat如何支持上述的功能
### mycat名词解释
```text
逻辑库: 实际存储在mysql上，映射到mycat上的数据库
逻辑表: 实际存储在mysql上，映射到mycat上的数据表

全局表: 多个数据节点存储了1:1的数据，例如数据字典适合做全局表
分片表: 按照一定的分片规则，表记录被分散存储在多个节点上面的表
E-R表(childTable): 跟随某个分片表，按照相同规则分散存储的表，便于后续表join。也可以使用分片表实现，只要分片规则一致即可。
非分片表: 数据只在一个数据节点上存放

分片规则: 

节点(dataNode): 
节点主机(dataHost): 

```
