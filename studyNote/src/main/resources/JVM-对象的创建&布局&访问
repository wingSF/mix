1.虚拟机内存中的数据
    如何创建
    如何布局
    如何访问

    基于Java堆讨论上述3个问题

    创建
        1.前提：分析对象仅限于普通java对象 ，数组和Class对象不在分析范围内
        2.步骤（即new的过程）
            检查new的参数能否在常量池中定位到一个类的符号引用
            检查该符号引用代表的类是否被加载、解析、初始化过
                没有执行类加载
            为该对象分配固定大小的内存
                内存分配
                    策略
                        1.指针碰撞
                            将内存区域视为俩块，一个使用过的，一块未使用的，中间是一个指针用来划清界限
                            每次分配对象，就是将指针移动固定的大小，Bump the Pointer
                        2.空闲列表
                            使用一个列表记录，哪些空间是可用的，哪些是不可用的
                            每次分配对象，根据对象大小计算一个合适的空间，Free List

                        选用策略1还是策略2
                            取决于内存区域是否是规整的
                                是否规整取决于采用的垃圾收集器是否带有压缩整理功能
                                    Serial、ParNew是带有Compact过程的，采用指针碰撞方式分配内存
                                    CMS基于Mark-Sweep，采用空闲列表

                    注意事项
                        分配对象时的线程安全问题
                            由于创建对象时频繁发生的，并发情况下，仅仅采用简单的指针碰撞时线程不安全的
                        解决办法
                            1.指针移动做同步处理（CAS配上失败重试保证更新操作的原子性）
                            2.将内存分配的动作按照线程划分在不同的空间中进行
                                即每个线程在Java堆中预先分配一小块内存，称为（Thread Local Allocation Buffer，TLAB）
                                是否使用TLAB，通过-XX:+/-UserTLAB参数来设定

                                每个线程创建对象，就在自己的区域中完成
                                只有当缓冲区用完了，才会同步锁定
                分配完成之后
                    初始化新空间为零值（不包括对象头），如果使用TLAB，可以在TLAB分配时完成
                        成员变量的默认初始值
                设置对象头（Object Header）
                    这个对象是哪个类的实例
                    如何才能找到类的元数据信息
                    对象的哈希码
                    对象的GC分代年龄
                    and so on ...
                调用init方法
                    由字节码中是否跟随invokespecial指令决定

    对象布局
        对象在内存中存储的布局可以划分为3个区域
            对象头（Header）
                对象运行时数据(Mark Word)
                    包括
                        哈希码（HashCode）
                        GC分代年龄
                        锁状态标志
                        线程持有的锁
                        偏向线程ID
                        偏向时间戳
                        and so on
                    注意
                        虚拟机未开启压缩指令
                            32位和64位的虚拟机上，分别为23bit和64bit
                        虚拟机开启压缩指令
                    防晕文档
                        https://blog.csdn.net/zhoufanyang_china/article/details/54601311
                类型指针
                    对象指向它的类元数据的指针
                        虚拟机通过这个指针确定这个对象是哪个类的实例
                如果是数组，对象头还会存储数组的长度
            实例数据（Instance Data）
                对象真正存储的有效信息，即程序代码中定义的各种类型的字段内容
                包括从父类继承下来的+子类定义的
                存储的顺序会受到虚拟机分配策略参数（FieldsAlloctionStyle）和java源码中定义的顺序的影响

                默认分配策略
                    longs/doubles、ints、shorts/chars、bytes/booleans、oops(Ordinary Object Pointers)

                    1.相同宽度的字段总是被分配到一起
                    2.父类定义的会出现在子类之前
                    3.CompactFields参数如果为true（默认true），子类中较窄的变量也可能会插入到父类变量的空隙之中

            填充（Padding）
                不是必然存在，也无特殊含义
                HotSpot VM的自动内存管理系统要求对象的起始地址必须是8字节的整数倍
                    即对象的大小一定是8的整数倍（对GC友好）
                对象头部分正好是8字节的倍数（1倍或者2倍），对象的实例数据部分如果没有对齐，就使用对齐填充补全

    对象访问
        Java程序通过 栈上 的reference数据来操作 堆上 的具体对象
        Java虚拟机规范只规定了 reference类型指向一个对象的引用
            这个引用通过何种方式去定位、访问堆中的对象的具体位置？由具体的虚拟机实现
        主流的访问方式
            句柄
                会在java堆中划分一块内存作为句柄池，reference中存储的就是对象的句柄地址
                句柄
                    对象实例数据的指针
                        指向堆
                    对象类型数据的指针
                        指向方法区
                优势：栈中存储的稳定的句柄地址，即使对象由于GC发生位置变更，只需要修改句柄中指向实例数据的指针即可
            直接指针
                存储的就是对象地址，包含到对象类型数据的指针
                优势：访问速度快，指针可以直接定位到对象。

