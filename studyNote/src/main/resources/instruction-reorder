# 指令重排序 instruction reorder

* 关键字
  * 源代码、编译器、字节码、JVM、解释器、机器码、多核心处理器、高性能处理器结构
    * java源代码通过编译器变成字节码
    * JVM加载字节码通过解释器变成机器码
    * 多核心处理器并行执行
    * 高性能处理器内部采用缓存和读写缓冲区架构导致的
* 满足as-if-serial语义
  * 单线程执行代码，看起来就像有顺序一样的
* 

重排序包括编译器的重排序和cpu的乱序执行

编译器的重排序

重排序只能保证单个线程内的顺序

cpu层面如x86的实现
编译器层面的是JMM的实现

* cpu层面存在的问题
    * cpu在执行指令时对内存是乱序访问
        * 解决乱序访问的办法就是内存屏障（store-barrier/load-barrier/full-barrier）
            * 屏障的作用是控制指令的执行顺序，保证可见性
            * store-barrier
                * 写屏障
                * 单个线程内  
                  编译器编译完的方法的指令(其中包含store-barrier指令)  
                  排在store-barrier指令之前的store指令先执行  
                  再执行排在store-barrier指令之后的store指令
        * 内存屏障只能解决代码执行的顺序一致性问题，cpu的缓存不一致还是需要cpu级别的缓存锁mesi协议解决
cpu层面解决办法：内存屏障


编译器层面：volatile

JMM层面的内存屏障：
    load-load-barrier
    store-store-barrier
    